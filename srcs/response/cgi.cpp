#include <iostream> //basic c++
#include <unistd.h> //fork, dup2
#include <sys/socket.h> //socketpair
#include <fcntl.h> //fcntl
#include <cstdio> //perror
#include <sys/wait.h> //waitpid

extern char	**environ;

int	main( void )
{
	// std::string			bin("/home/jdanelon/anaconda3/bin/python3");
	std::string			file("./cgi.py");

	pid_t				pid;
	int					fd[2], status;
	static const int	parent = 0, child = 1;

	socketpair(AF_LOCAL, SOCK_STREAM, 0, fd);
	fcntl(fd[0], F_SETFL, O_NONBLOCK, FD_CLOEXEC);
	fcntl(fd[1], F_SETFL, O_NONBLOCK, FD_CLOEXEC);
	pid = fork();
	if (pid == -1)
	{
		perror("fork");
		return (-1);
	}
	else if (pid == 0)
	{
		close(fd[parent]);
		dup2(fd[0], STDIN_FILENO);
		execve(bin.c_str(), file.substr(2).c_str(), environ);
	}
	waitpid(pid, &status, 0);
	close(fd[child]);
	close(fd[1]);
	return (0);
	// fork webserv
	// child will:
	// - set environment variables that can be accessed from cgi script (setenv)
	// - run binary based on cgi script (execve)
	// access message body generated by script (pipe to connect stdout to tmp file)
	//
	// parent will:
	// - wait for child to finish (waitpid)
	// - close open fds
}
